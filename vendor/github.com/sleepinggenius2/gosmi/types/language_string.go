// Code generated by "enumer -type=Language -autotrimprefix -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const _Language_name = "UnknownSMIv1SMIv2SMIngSPPI"

var _Language_index = [...]uint8{0, 7, 12, 17, 22, 26}

func (i Language) String() string {
	if i < 0 || i >= Language(len(_Language_index)-1) {
		return fmt.Sprintf("Language(%d)", i)
	}
	return _Language_name[_Language_index[i]:_Language_index[i+1]]
}

var _LanguageNameToValue_map = map[string]Language{
	_Language_name[0:7]:   0,
	_Language_name[7:12]:  1,
	_Language_name[12:17]: 2,
	_Language_name[17:22]: 3,
	_Language_name[22:26]: 4,
}

func LanguageFromString(s string) (Language, error) {
	if val, ok := _LanguageNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Language values", s)
}

func LanguageAsList() []Language {
	list := make([]Language, len(_LanguageNameToValue_map))
	idx := 0
	for _, v := range _LanguageNameToValue_map {
		list[idx] = v
		idx++
	}
	return list
}

func LanguageAsListString() []string {
	list := make([]string, len(_LanguageNameToValue_map))
	idx := 0
	for k := range _LanguageNameToValue_map {
		list[idx] = k
		idx++
	}
	return list
}

func LanguageIsValid(t Language) bool {
	for _, v := range LanguageAsList() {
		if t == v {
			return true
		}
	}
	return false
}

func (i Language) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *Language) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Language should be a string, got %s", data)
	}

	var err error
	*i, err = LanguageFromString(s)
	return err
}
