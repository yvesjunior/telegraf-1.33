// Code generated by "enumer -type=IndexKind -autotrimprefix -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const _IndexKind_name = "UnknownIndexAugmentReorderSparseExpand"

var _IndexKind_index = [...]uint8{0, 7, 12, 19, 26, 32, 38}

func (i IndexKind) String() string {
	if i < 0 || i >= IndexKind(len(_IndexKind_index)-1) {
		return fmt.Sprintf("IndexKind(%d)", i)
	}
	return _IndexKind_name[_IndexKind_index[i]:_IndexKind_index[i+1]]
}

var _IndexKindNameToValue_map = map[string]IndexKind{
	_IndexKind_name[0:7]:   0,
	_IndexKind_name[7:12]:  1,
	_IndexKind_name[12:19]: 2,
	_IndexKind_name[19:26]: 3,
	_IndexKind_name[26:32]: 4,
	_IndexKind_name[32:38]: 5,
}

func IndexKindFromString(s string) (IndexKind, error) {
	if val, ok := _IndexKindNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IndexKind values", s)
}

func IndexKindAsList() []IndexKind {
	list := make([]IndexKind, len(_IndexKindNameToValue_map))
	idx := 0
	for _, v := range _IndexKindNameToValue_map {
		list[idx] = v
		idx++
	}
	return list
}

func IndexKindAsListString() []string {
	list := make([]string, len(_IndexKindNameToValue_map))
	idx := 0
	for k := range _IndexKindNameToValue_map {
		list[idx] = k
		idx++
	}
	return list
}

func IndexKindIsValid(t IndexKind) bool {
	for _, v := range IndexKindAsList() {
		if t == v {
			return true
		}
	}
	return false
}

func (i IndexKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *IndexKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IndexKind should be a string, got %s", data)
	}

	var err error
	*i, err = IndexKindFromString(s)
	return err
}
