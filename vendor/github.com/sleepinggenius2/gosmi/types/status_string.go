// Code generated by "enumer -type=Status -autotrimprefix -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const _Status_name = "UnknownCurrentDeprecatedMandatoryOptionalObsolete"

var _Status_index = [...]uint8{0, 7, 14, 24, 33, 41, 49}

func (i Status) String() string {
	if i < 0 || i >= Status(len(_Status_index)-1) {
		return fmt.Sprintf("Status(%d)", i)
	}
	return _Status_name[_Status_index[i]:_Status_index[i+1]]
}

var _StatusNameToValue_map = map[string]Status{
	_Status_name[0:7]:   0,
	_Status_name[7:14]:  1,
	_Status_name[14:24]: 2,
	_Status_name[24:33]: 3,
	_Status_name[33:41]: 4,
	_Status_name[41:49]: 5,
}

func StatusFromString(s string) (Status, error) {
	if val, ok := _StatusNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Status values", s)
}

func StatusAsList() []Status {
	list := make([]Status, len(_StatusNameToValue_map))
	idx := 0
	for _, v := range _StatusNameToValue_map {
		list[idx] = v
		idx++
	}
	return list
}

func StatusAsListString() []string {
	list := make([]string, len(_StatusNameToValue_map))
	idx := 0
	for k := range _StatusNameToValue_map {
		list[idx] = k
		idx++
	}
	return list
}

func StatusIsValid(t Status) bool {
	for _, v := range StatusAsList() {
		if t == v {
			return true
		}
	}
	return false
}

func (i Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *Status) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Status should be a string, got %s", data)
	}

	var err error
	*i, err = StatusFromString(s)
	return err
}
