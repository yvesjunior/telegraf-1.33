// Code generated by "enumer -type=NodeKind -autotrimprefix -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const (
	_NodeKind_name_0 = "UnknownNodeScalar"
	_NodeKind_name_1 = "Table"
	_NodeKind_name_2 = "Row"
	_NodeKind_name_3 = "Column"
	_NodeKind_name_4 = "Notification"
	_NodeKind_name_5 = "Group"
	_NodeKind_name_6 = "Compliance"
	_NodeKind_name_7 = "Capabilities"
	_NodeKind_name_8 = "Any"
)

var (
	_NodeKind_index_0 = [...]uint8{0, 7, 11, 17}
	_NodeKind_index_1 = [...]uint8{0, 5}
	_NodeKind_index_2 = [...]uint8{0, 3}
	_NodeKind_index_3 = [...]uint8{0, 6}
	_NodeKind_index_4 = [...]uint8{0, 12}
	_NodeKind_index_5 = [...]uint8{0, 5}
	_NodeKind_index_6 = [...]uint8{0, 10}
	_NodeKind_index_7 = [...]uint8{0, 12}
	_NodeKind_index_8 = [...]uint8{0, 3}
)

func (i NodeKind) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _NodeKind_name_0[_NodeKind_index_0[i]:_NodeKind_index_0[i+1]]
	case i == 4:
		return _NodeKind_name_1
	case i == 8:
		return _NodeKind_name_2
	case i == 16:
		return _NodeKind_name_3
	case i == 32:
		return _NodeKind_name_4
	case i == 64:
		return _NodeKind_name_5
	case i == 128:
		return _NodeKind_name_6
	case i == 256:
		return _NodeKind_name_7
	case i == 65535:
		return _NodeKind_name_8
	default:
		return fmt.Sprintf("NodeKind(%d)", i)
	}
}

var _NodeKindNameToValue_map = map[string]NodeKind{
	_NodeKind_name_0[0:7]:   0,
	_NodeKind_name_0[7:11]:  1,
	_NodeKind_name_0[11:17]: 2,
	_NodeKind_name_1[0:5]:   4,
	_NodeKind_name_2[0:3]:   8,
	_NodeKind_name_3[0:6]:   16,
	_NodeKind_name_4[0:12]:  32,
	_NodeKind_name_5[0:5]:   64,
	_NodeKind_name_6[0:10]:  128,
	_NodeKind_name_7[0:12]:  256,
	_NodeKind_name_8[0:3]:   65535,
}

func NodeKindFromString(s string) (NodeKind, error) {
	if val, ok := _NodeKindNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeKind values", s)
}

func NodeKindAsList() []NodeKind {
	list := make([]NodeKind, len(_NodeKindNameToValue_map))
	idx := 0
	for _, v := range _NodeKindNameToValue_map {
		list[idx] = v
		idx++
	}
	return list
}

func NodeKindAsListString() []string {
	list := make([]string, len(_NodeKindNameToValue_map))
	idx := 0
	for k := range _NodeKindNameToValue_map {
		list[idx] = k
		idx++
	}
	return list
}

func NodeKindIsValid(t NodeKind) bool {
	for _, v := range NodeKindAsList() {
		if t == v {
			return true
		}
	}
	return false
}

func (i NodeKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *NodeKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeKind should be a string, got %s", data)
	}

	var err error
	*i, err = NodeKindFromString(s)
	return err
}
