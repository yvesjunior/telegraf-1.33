package slb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SetLoadBalancerListenerStatus invokes the slb.SetLoadBalancerListenerStatus API synchronously
func (client *Client) SetLoadBalancerListenerStatus(request *SetLoadBalancerListenerStatusRequest) (response *SetLoadBalancerListenerStatusResponse, err error) {
	response = CreateSetLoadBalancerListenerStatusResponse()
	err = client.DoAction(request, response)
	return
}

// SetLoadBalancerListenerStatusWithChan invokes the slb.SetLoadBalancerListenerStatus API asynchronously
func (client *Client) SetLoadBalancerListenerStatusWithChan(request *SetLoadBalancerListenerStatusRequest) (<-chan *SetLoadBalancerListenerStatusResponse, <-chan error) {
	responseChan := make(chan *SetLoadBalancerListenerStatusResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SetLoadBalancerListenerStatus(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SetLoadBalancerListenerStatusWithCallback invokes the slb.SetLoadBalancerListenerStatus API asynchronously
func (client *Client) SetLoadBalancerListenerStatusWithCallback(request *SetLoadBalancerListenerStatusRequest, callback func(response *SetLoadBalancerListenerStatusResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SetLoadBalancerListenerStatusResponse
		var err error
		defer close(result)
		response, err = client.SetLoadBalancerListenerStatus(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SetLoadBalancerListenerStatusRequest is the request struct for api SetLoadBalancerListenerStatus
type SetLoadBalancerListenerStatusRequest struct {
	*requests.RpcRequest
	ListenerPort   requests.Integer `position:"Query" name:"ListenerPort"`
	OwnerAccount   string           `position:"Query" name:"OwnerAccount"`
	HostId         string           `position:"Query" name:"HostId"`
	OwnerId        string           `position:"Query" name:"OwnerId"`
	ListenerStatus string           `position:"Query" name:"ListenerStatus"`
	LoadBalancerId string           `position:"Query" name:"LoadBalancerId"`
}

// SetLoadBalancerListenerStatusResponse is the response struct for api SetLoadBalancerListenerStatus
type SetLoadBalancerListenerStatusResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateSetLoadBalancerListenerStatusRequest creates a request to invoke SetLoadBalancerListenerStatus API
func CreateSetLoadBalancerListenerStatusRequest() (request *SetLoadBalancerListenerStatusRequest) {
	request = &SetLoadBalancerListenerStatusRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Slb", "2013-02-21", "SetLoadBalancerListenerStatus", "slb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateSetLoadBalancerListenerStatusResponse creates a response to parse from SetLoadBalancerListenerStatus response
func CreateSetLoadBalancerListenerStatusResponse() (response *SetLoadBalancerListenerStatusResponse) {
	response = &SetLoadBalancerListenerStatusResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
